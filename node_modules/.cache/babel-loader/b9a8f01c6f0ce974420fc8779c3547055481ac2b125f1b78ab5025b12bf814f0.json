{"ast":null,"code":"var _jsxFileName = \"F:\\\\web devlopment\\\\Assingment\\\\assingment\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // Declare state variables and set their initial values\n  const [accountOptions, setAccountOptions] = useState([{\n    value: 'option1',\n    label: 'Option 1'\n  }, {\n    value: 'option2',\n    label: 'Option 2'\n  }, {\n    value: 'option3',\n    label: 'Option 3'\n  }]);\n  const [rows, setRows] = useState([{\n    account: '',\n    debit: '',\n    credit: ''\n  }]);\n  const [totalDebit, setTotalDebit] = useState(0);\n  const [totalCredit, setTotalCredit] = useState(0);\n\n  // Function to add a new row to the form\n  const addRow = () => {\n    setRows([...rows, {\n      account: '',\n      debit: '',\n      credit: ''\n    }]);\n  };\n\n  // Function to delete a row from the form\n  const deleteRow = index => {\n    const updatedRows = rows.filter((row, i) => i !== index);\n    setRows(updatedRows);\n  };\n\n  // Function to update the values in the state array on change\n  const handleChange = (event, index) => {\n    const updatedRows = [...rows];\n    updatedRows[index][event.target.name] = event.target.value;\n    setRows(updatedRows);\n  };\n\n  // Function to format numbers in Indian format\n  const formatNumber = number => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(number);\n  };\n\n  // Render the form\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"account\",\n        children: \"Account:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"account\",\n        value: row.account,\n        onChange: event => handleChange(event, index),\n        children: accountOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"debit\",\n        children: \"Debit:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"debit\",\n        value: row.debit,\n        onChange: event => handleChange(event, index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"credit\",\n        children: \"Credit:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"credit\",\n        value: row.credit,\n        onChange: event => handleChange(event, index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"K8VlpTW48ZeZBhxwnoP8Yxt0mZM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","accountOptions","setAccountOptions","value","label","rows","setRows","account","debit","credit","totalDebit","setTotalDebit","totalCredit","setTotalCredit","addRow","deleteRow","index","updatedRows","filter","row","i","handleChange","event","target","name","formatNumber","number","Intl","NumberFormat","style","currency","format","map","option"],"sources":["F:/web devlopment/Assingment/assingment/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\n  export default function App() {\n  // Declare state variables and set their initial values\n  const [accountOptions, setAccountOptions] = useState([\n    { value: 'option1', label: 'Option 1' },\n    { value: 'option2', label: 'Option 2' },\n    { value: 'option3', label: 'Option 3' }\n  ]);\n  const [rows, setRows] = useState([\n    { account: '', debit: '', credit: '' }\n  ]);\n  const [totalDebit, setTotalDebit] = useState(0);\n  const [totalCredit, setTotalCredit] = useState(0);\n\n  // Function to add a new row to the form\n  const addRow = () => {\n    setRows([...rows, { account: '', debit: '', credit: '' }]);\n  }\n\n  // Function to delete a row from the form\n  const deleteRow = (index) => {\n    const updatedRows = rows.filter((row, i) => i !== index);\n    setRows(updatedRows);\n  }\n\n  // Function to update the values in the state array on change\n  const handleChange = (event, index) => {\n    const updatedRows = [...rows];\n    updatedRows[index][event.target.name] = event.target.value;\n    setRows(updatedRows);\n  }\n\n  // Function to format numbers in Indian format\n  const formatNumber = (number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(number);\n  \n\n}\n\n  // Render the form\n  return (\n    <form>\n      {rows.map((row, index) => (\n        <div key={index}>\n          <label htmlFor=\"account\">Account:</label>\n          <select\n            name=\"account\"\n            value={row.account}\n            onChange={(event) => handleChange(event, index)}\n          >\n            {accountOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          <label htmlFor=\"debit\">Debit:</label>\n          <input\n            type=\"number\"\n            name=\"debit\"\n            value={row.debit}\n            onChange={(event) => handleChange(event, index)}\n            \n          />\n          <label htmlFor=\"credit\">Credit:</label>\n          <input\n            type=\"number\"\n            name=\"credit\"\n            value={row.credit}\n            onChange={(event) => handleChange(event, index)}\n            \n          />\n          </div>\n      ))}\n      </form>\n  )\n            }       \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}